1. 感知机模型
　　　　感知机的思想很简单，比如我们在一个平台上有很多的男孩女孩，感知机的模型就是尝试找到一条直线，能够把所有的男孩和女孩隔离开。放到三维空间或者更高维的空间，感知机的模型就是尝试找到一个超平面，能够把所有的二元类别隔离开。当然你会问，如果我们找不到这么一条直线的话怎么办？找不到的话那就意味着类别线性不可分，也就意味着感知机模型不适合你的数据的分类。使用感知机一个最大的前提，就是数据是线性可分的。这严重限制了感知机的使用场景。它的分类竞争对手在面对不可分的情况时，比如支持向量机可以通过核技巧来让数据在高维可分，神经网络可以通过激活函数和增加隐藏层来让数据可分。

　　　　用数学的语言来说，如果我们有m个样本，每个样本对应于n维特征和一个二元类别输出，如下：

　　　　(x(0)1,x(0)2,...x(0)n,y0),(x(1)1,x(1)2,...x(1)n,y1),...(x(m)1,x(m)2,...x(m)n,ym)
　　　　我们的目标是找到这样一个超平面，即：

　　　　θ0+θ1x1+...+θnxn=0 

　　　　让其中一种类别的样本都满足θ0+θ1x1+...+θnxn>0 ，让另一种类别的样本都满足θ0+θ1x1+...+θnxn<0 ，从而得到线性可分。如果数据线性可分，这样的超平面一般都不是唯一的，也就是说感知机模型可以有多个解。

　　　　为了简化这个超平面的写法，我们增加一个特征x0=1 ，这样超平面为∑i=0nθixi=0。进一步用向量来表示为： θ∙x=0,其中θ为(n+1)x1的向量，x为(n+1)x1的向量, ∙为内积，后面我们都用向量来表示超平面。

　　　　   而感知机的模型可以定义为：y=sign(θ∙x) 其中：

sign(x)={−11x<0x≥0
2. 感知机模型损失函数
　　　　为了后面便于定义损失函数，我们将满足θ∙x>0的样本类别输出值取为1，满足θ∙x<0的样本类别输出值取为-1，  这样取y的值有一个好处，就是方便定义损失函数。因为正确分类的样本满足 yθ∙x>0，而错误分类的样本满足 yθ∙x<0。我们损失函数的优化目标，就是期望使误分类的所有样本，到超平面的距离之和最小。

　　　　由于yθ∙x<0，所以对于每一个误分类的样本i ，到超平面的距离是

　　　　−y(i)θ∙x(i)/||θ||2,

　　　　其中||θ||2为L2范数。

　　　　我们假设所有误分类的点的集合为M，则所有误分类的样本到超平面的距离之和为：

　　　　−∑xi∈My(i)θ∙x(i)/||θ||2,

　　　　这样我们就得到了初步的感知机模型的损失函数。

　　　　我们研究可以发现，分子和分母都含有θ,当分子的θ扩大N倍时，分母的L2范数也会扩大N倍。也就是说，分子和分母有固定的倍数关系。那么我们可以固定分子或者分母为1，然后求另一个即分子自己或者分母的倒数的最小化作为损失函数，这样可以简化我们的损失函数。在感知机模型中，我们采用的是保留分子，即最终感知机模型的损失函数简化为：

　　　　J(θ)=−∑xi∈My(i)θ∙x(i)
　　　　题外话，如果大家了解过支持向量机，就发现支持向量机采用的是固定分子为1，然后求1/||θ||2的最大化。采用不同的损失函数主要与它的后面的优化算法有关系。

　　　　

3. 感知机模型损失函数的优化方法
　　　　上一节我们讲到了感知机的损失函数：J(θ)=−∑xi∈My(i)θ∙x(i)，其中M是所有误分类的点的集合。这是一个凸函数，可以用梯度下降法或者拟牛顿法来解决，常用的是梯度下降法。

　　　　但是用普通的基于所有样本的梯度和的均值的批量梯度下降法（BGD）是行不通的，原因在于我们的损失函数里面有限定，只有误分类的M集合里面的样本才能参与损失函数的优化。所以我们不能用最普通的批量梯度下降,只能采用随机梯度下降（SGD）或者小批量梯度下降（MBGD）。如果对这几种梯度下降法的区别不了解，可以参考我的另一篇文章梯度下降（Gradient Descent）小结。

　　　　感知机模型选择的是采用随机梯度下降，这意味着我们每次仅仅需要使用一个误分类的点来更新梯度。

　　　　损失函数基于θ向量的的偏导数为：

　　　　∂∂θJ(θ)=−∑xi∈My(i)x(i)
　　　　θ的梯度下降迭代公式应该为：

　　　　θ=θ+α∑xi∈My(i)x(i)
　　　　由于我们采用随机梯度下降，所以每次仅仅采用一个误分类的样本来计算梯度，假设采用第i个样本来更新梯度，则简化后的θ向量的梯度下降迭代公式为：

　　　　θ=θ+αy(i)x(i)
　　　　其中α为步长，y(i)为样本输出1或者-1，x(i)为(n+1)x1的向量。 

3. 感知机模型的算法
　　　　前两节我们谈到了感知机模型，对应的损失函数和优化方法。这里我们就对感知机模型基于随机梯度下降来求θ向量的算法做一个总结。

　　　　算法的输入为m个样本，每个样本对应于n维特征和一个二元类别输出1或者-1，如下：

　　　　(x(0)1,x(0)2,...x(0)n,y0),(x(1)1,x(1)2,...x(1)n,y1),...(x(m)1,x(m)2,...x(m)n,ym)
　　　　输出为分离超平面的模型系数θ向量

　　　　算法的执行步骤如下：

　　　　1) 定义所有x0为1。选择θ向量的初值和 步长α的初值。可以将θ向量置为0向量，步长设置为1。要注意的是，由于感知机的解不唯一，使用的这两个初值会影响θ向量的最终迭代结果。

　　　　2) 在训练集里面选择一个误分类的点(x(i)1,x(i)2,...x(i)n,yi), 用向量表示即(x(i),y(i))，这个点应该满足：y(i)θ∙x(i)<0
　　　　3) 对θ向量进行一次随机梯度下降的迭代：θ=θ+αy(i)x(i)
　　　　4）检查训练集里是否还有误分类的点，如果没有，算法结束，此时的θ向量即为最终结果。如果有，继续第2步。

　　　　　　

4. 感知机模型的算法对偶形式
　　　　上一节的感知机模型的算法形式我们一般称为感知机模型的算法原始形式。对偶形式是对算法执行速度的优化。具体是怎么优化的呢？

　　　　通过上一节感知机模型的算法原始形式θ=θ+αy(i)x(i)可以看出，我们每次梯度的迭代都是选择的一个样本来更新θ向量。最终经过若干次的迭代得到最终的结果。对于从来都没有误分类过的样本，他被选择参与θ迭代的次数是0，对于被多次误分类而更新的样本j，它参与θ迭代的次数我们设置为mj。如果令θ向量初始值为0向量， 这样我们的θ向量的表达式可以写为：

　　　　θ=α∑j=1mmjy(j)x(j)
　　　　其中mj为样本(x(j),y(j))在随机梯度下降到当前的这一步之前因误分类而更新的次数。

　　　　每一个样本(x(j),y(j))的mj的初始值为0，每当此样本在某一次梯度下降迭代中因误分类而更新时，mj的值加1。

　　　　由于步长α为常量，我们令βj=αmj,这样θ向量的表达式为:

　　　　θ=∑j=1mβjy(j)x(j)
　　　　在每一步判断误分类条件的地方，我们用 y(i)θ∙x(i)<0 的变种 y(i)∑j=1mβjy(j)x(j)∙x(i)<0 来判断误分类。注意到这个判断误分类的形式里面是计算两个样本x(i)和x(j)的内积，而且这个内积计算的结果在下面的迭代次数中可以重用。如果我们事先用矩阵运算计算出所有的样本之间的内积，那么在算法运行时， 仅仅一次的矩阵内积运算比多次的循环计算省时。 计算量最大的判断误分类这儿就省下了很多的时间，，这也是对偶形式的感知机模型比原始形式优的原因。

　　　　样本的内积矩阵称为Gram矩阵，它是一个对称矩阵，记为 G=[x(i)∙x(j)]
　　　　这里给出感知机模型的算法对偶形式的内容。

　　　　算法的输入为m个样本，每个样本对应于n维特征和一个二元类别输出1或者-1，如下：

　　　　(x(0)1,x(0)2,...x(0)n,y0),(x(1)1,x(1)2,...x(1)n,y1),...(x(m)1,x(m)2,...x(m)n,ym)
　　　　输出为分离超平面的模型系数θ向量

　　　　算法的执行步骤如下：

　　　　1) 定义所有x0为1，步长α初值，设置β的初值0。可以将α设置为1。要注意的是，由于感知机的解不唯一，使用的步长初值会影响θ向量的最终迭代结果。

　　　　2) 计算所有样本内积形成的Gram矩阵G。

　　　　2) 在训练集里面选择一个误分类的点(x(i),y(i))，这个点应该满足： y(i)∑j=1mβjy(j)x(j)∙x(i)<0，  在检查是否满足时可以通过查询Gram矩阵的gij 的值来快速计算是否小于0。

　　　　3) 对β向量的第i个分量进行一次更新：βi=βi+α
　　　　4）检查训练集里是否还有误分类的点，如果没有，算法结束，此时的θ向量最终结果为下式。如果有，继续第2步。

　　　　　　θ=∑j=1mβjy(j)x(j) 

　　　　　　其中βj 为β向量的第j个分量。

 

5. 小结
　　　　感知机算法是一个简单易懂的算法，自己编程实现也不太难。前面提到它是很多算法的鼻祖，比如支持向量机算法，神经网络与深度学习。因此虽然它现在已经不是一个在实践中广泛运用的算法，还是值得好好的去研究一下。感知机算法对偶形式为什么在实际运用中比原始形式快，也值得好好去体会。