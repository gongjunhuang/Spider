/**
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start ="hit"
end ="cog"
dict =["hot","dot","dog","lot","log"]

As one shortest transformation is"hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length5.

Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

**/



import java.util.*;

public class Solution {
    public int ladderLength(String start, String end, HashSet<String> dict) {
        int res = 1;
        LinkedList<String> queue = new LinkedList<>();
        queue.offer(start);
        while(!queue.isEmpty()){
            int size = queue.size();
            while(size>0){
                String s = queue.poll();
                size --;
                if(isDiffOne(s, end)){
                    return res + 1;
                }
                for(Iterator<String> it = dict.iterator(); it.hasNext();){
                    String str = it.next();
                    if(isDiffOne(str, s)){
                        queue.offer(str);
                        it.remove();
                    }
                }
            }
            res++;
        }
        return 0;
    }
    
    public boolean isDiffOne(String s1, String s2){
        int count = 0;
        for(int i=0; i<s1.length(); i++){
            if(s1.charAt(i) != s2.charAt(i))
                count++;
        }
        return count==1? true:false;
    }
}