
'''
def jumpAndBackpedal(isMyNumber):
    '''
    isMyNumber: Procedure that hides a secret number. 
     It takes as a parameter one number and returns:
     *  -1 if the number is less than the secret number
     *  0 if the number is equal to the secret number
     *  1 if the number is greater than the secret number
 
    returns: integer, the secret number
    ''' 
    guess = 1
    if isMyNumber(guess) == 1:
        return guess
    foundNumber = False
    while not foundNumber:
        sign = isMyNumber(guess)
        if sign == -1:
            guess *= 2
        elif(sign == 1):
            guess -= 1
        else:
            foundNumber = true
    return guess
'''


'''
class courseInfo(object):



    def __init__(self, courseName):

        self.courseName = courseName

        self.psetsDone = []

        self.grade = "No Grade"

        

    def setPset(self, pset, score):

        self.psetsDone.append((pset, score))

        

    def getPset(self, pset):

        for (p, score) in self.psetsDone:

            if p == pset:

                return score



    def setGrade(self, grade):

        if self.grade == "No Grade":

            self.grade = grade



    def getGrade(self):

        return self.grade







class edx(object):

    def __init__(self, courses):

        self.myCourses = []

        for course in courses:

            self.myCourses.append(courseInfo(course))



    def setGrade(self, grade, course="6.01x"):

        """

        grade: integer greater than or equal to 0 and less than or equal to 100

        course: string 



        This method sets the grade in the courseInfo object named by `course`.   



        If `course` was not part of the initialization, then no grade is set, and no

        error is thrown.



        The method does not return a value.

        """

        #   fill in code to set the grade

        for i in range(len(self.myCourses)):

            if self.myCourses[i].courseName == course:

                self.myCourses[i].setGrade(grade)



    def getGrade(self, course="6.02x"):

        """

        course: string 



        This method gets the grade in the the courseInfo object named by `course`.



        returns: the integer grade for `course`.  

        If `course` was not part of the initialization, returns -1.

        """

        #   fill in code to get the grade

        result = -1

        for i in range(len(self.myCourses)):

            if self.myCourses[i].courseName == course:

                return self.myCourses[i].getGrade()

        return result



    def setPset(self, pset, score, course="6.00x"):

        """

        pset: a string or a number

        score: an integer between 0 and 100

        course: string



        The `score` of the specified `pset` is set for the

        given `course` using the courseInfo object.



        If `course` is not part of the initialization, then no pset score is set,

        and no error is thrown.

        """

        #   fill in code to set the pset

        for i in range(len(self.myCourses)):

            if self.myCourses[i].courseName == course:

                self.myCourses[i].setPset(pset, score)



    def getPset(self, pset, course="6.00x"):

        """

        pset: a string or a number

        course: string        



        returns: The score of the specified `pset` of the given

        `course` using the courseInfo object.

        If `course` was not part of the initialization, returns -1.

        """

        #   fill in code to get the pset

        result = -1

        for i in range(len(self.myCourses)):

            if self.myCourses[i].courseName == course:

                return self.myCourses[i].getPset(pset)

        return result





edX = edx( ["6.00x","6.01x","6.02x"] )

edX.setPset(1,100)

edX.setPset(2,100,"6.00x")

edX.setPset(2,90,"6.00x")



edX.setGrade(100)



for c in ["6.00x","6.01x","6.02x"]:

    edX.setGrade(90,c)
'''



'''
class Member(object):
    def __init__(self, founder):
        """ 
        founder: string
        Initializes a member. 
        Name is the string of name of this node,
        parent is None, and no children
        """        
        self.name = founder
        self.parent = None         
        self.children = []    

    def __str__(self):
        return self.name    

    def add_parent(self, mother):
        """
        mother: Member
        Sets the parent of this node to the `mother` Member node
        """
        self.parent = mother   

    def get_parent(self):
        """
        Returns the parent Member node of this Member
        """
        return self.parent 

    def is_parent(self, mother):
        """
        mother: Member
        Returns: Boolean, whether or not `mother` is the 
        parent of this Member
        """
        return self.parent == mother  

    def add_child(self, child):
        """
        child: Member
        Adds another child Member node to this Member
        """
        self.children.append(child)   

    def is_child(self, child):
        """
        child: Member
        Returns: Boolean, whether or not `child` is a
        child of this Member
        """
        return child in self.children 


class Family(object):
    def __init__(self, founder):
        """ 
        Initialize with string of name of oldest ancestor

        Keyword arguments:
        founder -- string of name of oldest ancestor
        """

        self.names_to_nodes = {}
        self.root = Member(founder)    
        self.names_to_nodes[founder] = self.root   

    def set_children(self, mother, list_of_children):
        """
        Set all children of the mother. 

        Keyword arguments: 
        mother -- mother's name as a string
        list_of_children -- children names as strings
        """
        # convert name to Member node (should check for validity)
        mom_node = self.names_to_nodes[mother]   
        # add each child
        for c in list_of_children:           
            # create Member node for a child   
            c_member = Member(c)               
            # remember its name to node mapping
            self.names_to_nodes[c] = c_member    
            # set child's parent
            c_member.add_parent(mom_node)        
            # set the parent's child
            mom_node.add_child(c_member)         
    
    def is_parent(self, mother, kid):
        """
        Returns True or False whether mother is parent of kid. 

        Keyword arguments: 
        mother -- string of mother's name
        kid -- string of kid's name
        """
        mom_node = self.names_to_nodes[mother]
        child_node = self.names_to_nodes[kid]
        return child_node.is_parent(mom_node)   

    def is_child(self, kid, mother):
        """
        Returns True or False whether kid is child of mother. 

        Keyword arguments: 
        kid -- string of kid's name
        mother -- string of mother's name
        """        
        mom_node = self.names_to_nodes[mother]   
        child_node = self.names_to_nodes[kid]
        return mom_node.is_child(child_node)

    def cousin(self, a, b):
        """
        Returns a tuple of (the cousin type, degree removed) 

        Keyword arguments: 
        a -- string that is the name of node a
        b -- string that is the name of node b

        cousin type:
          -1 if a and b are the same node.
          -1 if either one is a direct descendant of the other
          >=0 otherwise, it calculates the distance from 
          each node to the common ancestor.  Then cousin type is 
          set to the smaller of the two distances, as described 
          in the exercises above

        degrees removed:
          >= 0
          The absolute value of the difference between the 
          distance from each node to their common ancestor.
        """
        
        ## YOUR CODE HERE ####
        # convert names to Member nodes

        a_node = self.names_to_nodes[a]

        b_node = self.names_to_nodes[b]

        

        # initialization

        gen_a = self.get_generation(a)

        gen_b = self.get_generation(b)

        degRemoved = abs(gen_a - gen_b)

        

        # function to calculate the cousinType for same generation people

        def calcSameGenCousin(a, b):

            a_node = self.names_to_nodes[a]

            b_node = self.names_to_nodes[b]

            cousinType = 1

            gen_a = self.get_generation(a)

            for i in range(gen_a):

                if self.is_sibling(a_node.get_parent().name, b_node.get_parent().name):
                    break

                else:

                    cousinType += 1

                    a_node = a_node.get_parent()

                    b_node = b_node.get_parent()

            return cousinType

        

        # a and b are the same node

        if a_node == b_node:

            cousinType = -1

            degRemoved = 0

        

        # a and b are direct descendants

        elif self.are_direct_descendants(a, b):

            cousinType = -1

 

        # a and b are siblings

        elif self.is_sibling(a, b):

            cousinType = 0
            degRemoved = 0

        

        # a and b in same generation but not siblings

        elif gen_a == gen_b and not self.is_sibling(a, b):

            cousinType = calcSameGenCousin(a, b)

       

        # a and b different generations, determine if ancestors at same generation

        # are siblings

        else:

            if gen_a < gen_b:

                fixed = a

                var = b

            else:

                fixed = b

                var = a

            var_node = self.names_to_nodes[var]

            for i in range(degRemoved):

                var_node = var_node.get_parent()

            var = var_node.name

            if self.is_sibling(var,fixed):

                cousinType = calcSameGenCousin(var, fixed)-1

            else:

                cousinType = calcSameGenCousin(var, fixed)

                 

        return (cousinType, degRemoved)
'''