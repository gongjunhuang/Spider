DPI

主要是通过DPI（Deep Packet Inspection）来实现的，一般称之为「深度报文检测」或「深度包检测」。
从字面意思来讲，所谓「深度」是相对于普通的报文检测而言的。

普通的报文检测仅分析IP包的层4以下5元素：源地址、目的地址、源端口、目的端口及协议类型。而DPI除了对以上5元素进行分析外，增加了应用层分析，用来识别各种应用及其内容。

普通报文检测是通过端口号来识别应用类型的。如端口为80时，则代表为上网应用。这样的情况下会产生很多风险，一些病毒或者垃圾应用会采取假冒的端口号来伪装成合法报文。那么，普通检测方法就没办法识别了。

而深度报文检测是对报文内容和协议特征进行检测的，非法的应用可以隐藏和变换端口号，但是比较难以隐藏应用层的协议特征。

特征识别：不同的应用通常会采用不同的协议，而各种协议都有其特殊的指纹，这些指纹可能是特定的端口、特定的字符串或者特定的Bit序列。 基于特征的识别技术，正是通过识别数据报文中的指纹信息来确定业务流所承载的应用。

关联识别：像VoIP/FTP/在线游戏等业务普遍采用控制流与业务流分离的方式，通过控制流完成握手，其业务流没有任何特征。因此首先由应用层网关识别出控制流，并根据控制流协议分析识别出业务流的端口和对端网关地址等信息，然后对业务流进行解析，从而识别出相应的业务流。

行为识别：基于终端已经实施的行为进行分析，判读用户正在进行的动作或即将实施的动作。行为识别技术通常用于无法根据协议判断的业务识别。如垃圾邮件等。

DPI实现的功能：

    应用分析——网络流量构成分析、性能分析、流向分析等；

    用户分析——用户群区分、行为分析、终端分析、趋势分析等；

    网元分析——根据区域属性（市、区、街道等）、基站负载情况进行分析等；

    流量管控——P2P限速、保证QoS、带宽保障、网络资源优化等；

    安全保障——DDoS攻击、数据广播风暴、防范恶意病毒攻击等。


DPI如何识别App数据

    判断DPI能力如何，首先看协议识别的数量，就是能够识别多少种网络中运行的应用协议。能够识别的越多，则DPI的控制就越精确，控制范围就越广；其次是从新的协议出现到能够识别响应速度。<br>DPI的技术核心点在于如何维护一个高准确性、高实时性的应用特征库，
    进而才能保障检测的准确性和实时性。所以，当前误报及漏报率还是比较高的，也不能涵盖所有应用协议。

    以微信举例，主要是做了针对性的协议监控，通过算法对特征数据和字符串进行匹配，对微信的私有协议解析进行识别


跟前面说的一样，用的是DPI。DPI包里面包含起始IP，目的IP，端口号，请求URL，cookie等非常多的信息。通过分析目的IP，请求和cookie等可以判断是哪个应用，再配合3a数据库，可以判断出用户帐号，进而获得用户身份信息。





思路

在虚拟机中部署多个应用，通过Wireshark抓包保存为pcap格式，再利用第三方工具提取特征，最后使用机器学习算法进行分类。因为本文并不是探讨如何实时监测数据包并即时进行反馈，本文更多是研究使用样本来对捕抓到的流量进行分类，作为尝试建立流量特征库的前提。

在实验中，会通过3个应用产生流量数据，分别是XMLRPC调用、REST API的调用和SOAP服务的访问。

XMLRPC所发送的协议为HTML/XML，包含了RPC的字段，REST传输的数据可以检查其中的内容，应该为JSON数据，SOAP则是可以看到HTTP方法和承载的XML数据。在实验中，假设已经能区分出哪些包是关键的：除去建立TCP连接和断开的相关包，找到交互的关键数据包。

一般来说流量分类可以基于下面的特征进行分类：源、目标MAC地址，源、目标IP地址，源、目标端口，IP协议版本、TCP源、目标端口，
TCP报文长度，使用的应用层协议，协议中的关键字段（XMLRPC的RPC2，浏览器HTTP的GET）

这个实验打算用MAC地址、IP地址、TCP目标端口、协议的关键字及部分Payload内容这几项特征进行分类。

由于在前面已经介绍了朴素贝叶斯的原理，因此在实验中将会使用现成的python库完成分类，我要做的是控制应用进行交互并产生数据，最后提取出数据构建样本，再交给现成的分类器进行分类。
