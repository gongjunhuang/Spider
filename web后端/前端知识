<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web 9</title>
    </head>
    <body>
        <!-- 注意, 每个标签都有 class 和 id 这两个属性 -->
        <!-- class 可以重复, id 不能重复 -->
        <div class="login-form">
            <input id="id-input-username" class='gua-input' type="text" value="gua">
            <br>
            <input id="id-input-password" class='gua-input' type="password" value="123">
            <br>
            <button id="id-button-login">登录按钮</button>
        </div>
        <h1 id='id-msg'></h1>
        <!-- <script src='web9.js'></script> -->
<script>
    // 2017/03/05
    //
    // 此为第 9 课的上课内容
    //
    // 今天上课的主要内容有
    //
    // 如何在网页中引入 JavaScript 代码
1. script标签引入js代码：<script src='web9.js'></script>
2.直接写js代码

    // 需要掌握的 js 基础
    // 什么是 DOM, 常用 DOM API 使用
    // 什么是事件, 如何绑定事件
    // JSON 格式
    // 什么是后端 API, 怎么做后端 API
    //
    // 应该都能看懂, 不懂的稍微做个笔记, 等上课讲解


    // 自己定义一个 log 函数
    // 不需要知道这个函数的具体原理, 照抄拿来用即可
    var log = function() {
        console.log.apply(console, arguments)
    }

    // 在 html 文件中, js 代码放在 script 标签中
    // *** 一定要把 script 标签放到 body 最后面
    // 原因上课解释
    // 浏览器载入这个 html 文件后, 会执行我们写在 script 标签中的代码
    log('代码开始')

    // *** 注意, 要看到 log 的输出, 需要打开浏览器的终端
    // chrome 右键 - 检查元素 - 上方的 tab 选择 终端(console)即可


    // js 基础
    // ===
    // js 有两种注释
    // 单行注释是 //
    // 多行注释是 首尾 用 /* */
    /*
    这是多行注释
    */
    // 定义变量必须使用 var 修饰符
    var a = 1
    var b = 'gua'
    // 多行字符串用 反引号(数字 1 左边的按键)
    var c = `
        多行字符串
    `

    // js 的布尔值是 true 和 false
    // js 用来表示空的关键字有 undefined 和 null 两个
    // 这两个的区别 先不要关心
    log('布尔值', true, false)
    log('未定义', undefined, null)

    // 函数定义应该使用如下的方式
    var greeting = function() {
        log('hello')
    }
    var greeting1 = function(name) {
        log('hello ', name)
    }
    /*
    相当于
    def greeting():
        log('hello')
    */

    // 数组和 python 一样, 只是 append 变成了 push
    var arr = [1, 2, 3]
    arr.push(4)
    log('array push', arr)
    // 取长度用 arr.length
    log('length', arr.length)


    // js 的字典就是对象
    // 并且可以省略 key 的引号
    var obj = {
        'key': 'value',
        name: 'gua',
    }
    // 引用字典的值 可以用很简单的点语法(也可以用传统的用法)
    // 引用不存在的值 不会报错 得到的结果是 undefined 而已
    log('object key', obj.key, obj['key'], obj['name'], obj.gua)



    /*
    往下是使用 js 操作页面元素的方法
    =====
    DOM(文档对象模型) 是浏览器对 html 文件的描述方式
    DOM API 是浏览器提供给 JavaScript 操作 html 页面内元素的方式
    简而言之, 浏览器提供了一些内置函数来让我们操作页面(增删改查)
    */

    // 查找元素
    // ===
    //
    // 查找元素使用 document.querySelector() 函数
    // document 是整个文档(包含了 html), 可以理解为 html 的父节点
    // 这个函数的参数是一个选择器(和 CSS 选择器一样)
    // 选择器语法和 CSS 选择器一样, 现在只用 3 个基础选择器
    // 元素选择器
    var body = document.querySelector('body')
    // class 选择器, 用的是   .类名
    var form = document.querySelector('.login-form')
    // id 选择器, 用的是   #id
    var loginButton = document.querySelector('#id-button-login')
    // log 出来看看
    log(body, form, loginButton)


    // 操作元素的默认属性
    // ===
    //
    // 获得特定属性值
    var user = document.querySelector('#id-input-username')
    var userValue = user.value
    log('user value', userValue)
    // 不存在的属性会返回 undefined, 它在 js 中代表不存在
    // null 和 undefined 很相似
    log('没有的属性', user.gua)

    // 设置特定属性值
    user.value = 'set value'



    // 操作元素(创建, 删除, 修改)
    // ===
    //
    // 修改
    // 用 insertAdjacentHTML 给一个元素添加子元素
    // 这里我们给 .login-form 添加一个 h1 标签
    var form = document.querySelector('.login-form')
    // 第一个参数表示插入的位置, 'beforeend' 表示插入在结束之前(也就是添加到标签末尾)
    // 第二个参数是你想插入的 html 内容
    form.insertAdjacentHTML('beforeend', '<h1 class="gua-h1">你好</h1>')

    // 删除元素
    var pwd = document.querySelector('#id-input-password')
    // pwd.remove()

    // 修改元素的 html 值
    var msg = document.querySelector('#id-msg')
    msg.innerHTML = '<button>你好</button>'
    // innerHTML 不会转义字符串
    // innerText 会转义字符串
    msg.innerText = '<button>text</button>'
    // 事件
    // ===
    //
    // 事件是用来处理响应的一个机制
    // 这个响应可以来自于用户(点击, 鼠标移动, 滚动), 也可以来自于浏览器
    //
    // 下面的链接描述了所有事件, 不过我们先从最常用的事件学起, click 事件
    // https://developer.mozilla.org/en-US/docs/Web/Events
    //
    // 常用例子, 给按钮添加一个点击的事件
    // 1, 获得按钮
    var loginButton = document.querySelector('#id-button-login')
    // 2, 声明一个函数, 用于在按钮点击后执行
    var clicked = function() {
        log('按钮被点击到了')
    }
    // 3, 添加事件, 使用 addEventListener 函数
    // 它有两个参数
    // 第一个是事件的名字, 'click' 表示点击
    // 第二个是事件发生后会被自动调用的函数
    loginButton.addEventListener('click', clicked)
    //
    // 添加完成, 可以自己在浏览器试试, 记得打开 console


    /*
    1, 给 add button 绑定事件
    2, 在事件处理函数中, 获取 input 的值
    3, 用获取的值 组装一个 todo-cell HTML 字符串
    4, 插入 todo-list 中
    */

    var log = function() {
        console.log.apply(console, arguments)
    }

    var e = function(sel) {
        return document.querySelector(sel)
    }

    var todoTemplate = function(todo) {
        var t = `
            <div class="todo-cell">
                <button class="todo-delete">删除</button>
                <span>${todo}</span>
            </div>
        `
        return t
        /*
        上面的写法在 python 中是这样的
        t = """
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>{}</span>
        </div>
        """.format(todo)
        */

    }

    var insertTodo = function(todo) {
        var todoCell = todoTemplate(todo)
        // 插入 todo-list
        var todoList = e('.todo-list')
        todoList.insertAdjacentHTML('beforeend', todoCell)
    }

    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        log('click')
        var input = e('#id-input-todo')
        var todo = input.value
        // log('todo ', todo)
        insertTodo(todo)
    })

    /*
    给 删除 按钮绑定删除的事件
    1, 绑定事件
    2, 删除整个 todo-cell 元素
    */
    var todoList = e('.todo-list')
    // 事件响应函数会被传入一个参数, 就是事件本身
    todoList.addEventListener('click', function(event){
        // log('click todolist', event)
        // 我们可以通过 event.target 来得到被点击的元素
        var self = event.target
        // log('被点击的元素是', self)
        // 通过比较被点击元素的 class 来判断元素是否是我们想要的
        // classList 属性保存了元素的所有 class
        // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
        // log(self.classList)
        // 判断是否拥有某个 class 的方法如下
        if (self.classList.contains('todo-delete')) {
            log('点到了 删除按钮')
            // 删除 self 的父节点
            // parentElement 可以访问到元素的父节点
            self.parentElement.remove()
        } else {
            // log('点击的不是删除按钮******')
        }
    })


    // 有一个常见的需求是在 字典/数组 和 字符串 之间相互转换
    // 这个过程叫做 序列化/反序列化
    // 在 js 中, 序列化使用 JSON 数据格式
    // 全称 JavaScript Object Notation (js 对象标记)
    // 这个格式已经是现在用于互联网数据交换的事实标准格式了
    // python 也有内置的标准库进行这种转换

    // js 中转换方式如下
    // 注意 typeof 语句可以查看一个变量的类型
    var s = JSON.stringify([1, 2, 3, 4])
    log('序列化后的字符串', typeof s, s)
    var a = JSON.parse(s)
    // 在 js 中, 由于历史遗留的 bug
    // typeof [] 会显示 object, 这是正常的
    log('反序列化后的数组', typeof a, a)

    // 其他内容都是概念 上课继续











    // var ajax = function(method, path, data, reseponseCallback) {
    //     var r = new XMLHttpRequest()
    //     // 设置请求方法和请求地址
    //     r.open(method, path, true)
    //     // 设置发送的数据的格式
    //     r.setRequestHeader('Content-Type', 'application/json')
    //     // 注册响应函数
    //     r.onreadystatechange = function() {
    //         if(r.readyState === 4) {
    //             reseponseCallback(r)
    //         }
    //     }
    //     // 发送请求
    //     r.send(data)
    // }
    //
    // var loadTodos = function() {
    //     var baseUrl = 'localhost:3000'
    //     var method = 'POST'
    //     var path = '/api/todo/all'
    //     var url = baseUrl + path
    //     var data = 'todo=吃瓜'
    //     ajax(method, url, data, function(r){
    //         console.log('收到服务器响应的数据', r)
    //         // insertTodos(todos)
    //     })
    // }
</script>
    </body>
</html>
